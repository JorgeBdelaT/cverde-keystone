input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input AllianceSocialNetworkRelateToManyInput {
  create: [AllianceSocialNetworkCreateInput]
  connect: [AllianceSocialNetworkWhereUniqueInput]
  disconnect: [AllianceSocialNetworkWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Alliance {
  id: ID!
  createdAt: String
  name: String
  description: String
  endDate: String
  inChargeUser: User
  isActive: Boolean
  logo: ImageFieldOutput
  socialNetworks(
    where: AllianceSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortAllianceSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [AllianceSocialNetwork!]!
  _socialNetworksMeta(
    where: AllianceSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortAllianceSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use socialNetworksCount instead."
    )
  socialNetworksCount(where: AllianceSocialNetworkWhereInput! = {}): Int
}

input AllianceWhereInput {
  AND: [AllianceWhereInput!]
  OR: [AllianceWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  endDate: String
  endDate_not: String
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_in: [String]
  endDate_not_in: [String]
  inChargeUser: UserWhereInput
  inChargeUser_is_null: Boolean
  isActive: Boolean
  isActive_not: Boolean

  """
   condition must be true for all nodes
  """
  socialNetworks_every: AllianceSocialNetworkWhereInput

  """
   condition must be true for at least 1 node
  """
  socialNetworks_some: AllianceSocialNetworkWhereInput

  """
   condition must be false for all nodes
  """
  socialNetworks_none: AllianceSocialNetworkWhereInput
}

input AllianceWhereUniqueInput {
  id: ID!
}

enum SortAlliancesBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  endDate_ASC
  endDate_DESC
  isActive_ASC
  isActive_DESC
}

input AllianceOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  name: OrderDirection
  description: OrderDirection
  endDate: OrderDirection
  isActive: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AllianceUpdateInput {
  createdAt: String
  name: String
  description: String
  endDate: String
  inChargeUser: UserRelateToOneInput
  isActive: Boolean
  logo: ImageFieldInput
  socialNetworks: AllianceSocialNetworkRelateToManyInput
}

input AlliancesUpdateInput {
  id: ID!
  data: AllianceUpdateInput
}

input AllianceCreateInput {
  createdAt: String
  name: String
  description: String
  endDate: String
  inChargeUser: UserRelateToOneInput
  isActive: Boolean
  logo: ImageFieldInput
  socialNetworks: AllianceSocialNetworkRelateToManyInput
}

input AlliancesCreateInput {
  data: AllianceCreateInput
}

input SocialNetworkRelateToOneInput {
  create: SocialNetworkCreateInput
  connect: SocialNetworkWhereUniqueInput
  disconnect: SocialNetworkWhereUniqueInput
  disconnectAll: Boolean
}

input AllianceRelateToOneInput {
  create: AllianceCreateInput
  connect: AllianceWhereUniqueInput
  disconnect: AllianceWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type AllianceSocialNetwork {
  id: ID!
  link: String
  name: String
  socialNetwork: SocialNetwork
  alliance: Alliance
}

input AllianceSocialNetworkWhereInput {
  AND: [AllianceSocialNetworkWhereInput!]
  OR: [AllianceSocialNetworkWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  link: String
  link_not: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  link_i: String
  link_not_i: String
  link_contains_i: String
  link_not_contains_i: String
  link_starts_with_i: String
  link_not_starts_with_i: String
  link_ends_with_i: String
  link_not_ends_with_i: String
  link_in: [String]
  link_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  socialNetwork: SocialNetworkWhereInput
  socialNetwork_is_null: Boolean
  alliance: AllianceWhereInput
  alliance_is_null: Boolean
}

input AllianceSocialNetworkWhereUniqueInput {
  id: ID!
}

enum SortAllianceSocialNetworksBy {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
  name_ASC
  name_DESC
}

input AllianceSocialNetworkOrderByInput {
  id: OrderDirection
  link: OrderDirection
  name: OrderDirection
}

input AllianceSocialNetworkUpdateInput {
  link: String
  name: String
  socialNetwork: SocialNetworkRelateToOneInput
  alliance: AllianceRelateToOneInput
}

input AllianceSocialNetworksUpdateInput {
  id: ID!
  data: AllianceSocialNetworkUpdateInput
}

input AllianceSocialNetworkCreateInput {
  link: String
  name: String
  socialNetwork: SocialNetworkRelateToOneInput
  alliance: AllianceRelateToOneInput
}

input AllianceSocialNetworksCreateInput {
  data: AllianceSocialNetworkCreateInput
}

"""
 Red social (instagram, facebook,...)
"""
type SocialNetwork {
  id: ID!
  logoUrl: String
  name: String
}

input SocialNetworkWhereInput {
  AND: [SocialNetworkWhereInput!]
  OR: [SocialNetworkWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  logoUrl: String
  logoUrl_not: String
  logoUrl_contains: String
  logoUrl_not_contains: String
  logoUrl_starts_with: String
  logoUrl_not_starts_with: String
  logoUrl_ends_with: String
  logoUrl_not_ends_with: String
  logoUrl_i: String
  logoUrl_not_i: String
  logoUrl_contains_i: String
  logoUrl_not_contains_i: String
  logoUrl_starts_with_i: String
  logoUrl_not_starts_with_i: String
  logoUrl_ends_with_i: String
  logoUrl_not_ends_with_i: String
  logoUrl_in: [String]
  logoUrl_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
}

input SocialNetworkWhereUniqueInput {
  id: ID!
}

enum SortSocialNetworksBy {
  id_ASC
  id_DESC
  logoUrl_ASC
  logoUrl_DESC
  name_ASC
  name_DESC
}

input SocialNetworkOrderByInput {
  id: OrderDirection
  logoUrl: OrderDirection
  name: OrderDirection
}

input SocialNetworkUpdateInput {
  logoUrl: String
  name: String
}

input SocialNetworksUpdateInput {
  id: ID!
  data: SocialNetworkUpdateInput
}

input SocialNetworkCreateInput {
  logoUrl: String
  name: String
}

input SocialNetworksCreateInput {
  data: SocialNetworkCreateInput
}

input CoordinationUserPositionRelateToManyInput {
  create: [CoordinationUserPositionCreateInput]
  connect: [CoordinationUserPositionWhereUniqueInput]
  disconnect: [CoordinationUserPositionWhereUniqueInput]
  disconnectAll: Boolean
}

input CoordinationSocialNetworkRelateToManyInput {
  create: [CoordinationSocialNetworkCreateInput]
  connect: [CoordinationSocialNetworkWhereUniqueInput]
  disconnect: [CoordinationSocialNetworkWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Coordination {
  id: ID!
  createdAt: String
  description: String
  logoUrl: String
  members(
    where: CoordinationUserPositionWhereInput! = {}
    search: String
    sortBy: [SortCoordinationUserPositionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationUserPositionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CoordinationUserPosition!]!
  _membersMeta(
    where: CoordinationUserPositionWhereInput! = {}
    search: String
    sortBy: [SortCoordinationUserPositionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationUserPositionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use membersCount instead."
    )
  membersCount(where: CoordinationUserPositionWhereInput! = {}): Int
  name: String
  organizationName: String
  socialNetworks(
    where: CoordinationSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortCoordinationSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CoordinationSocialNetwork!]!
  _socialNetworksMeta(
    where: CoordinationSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortCoordinationSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use socialNetworksCount instead."
    )
  socialNetworksCount(where: CoordinationSocialNetworkWhereInput! = {}): Int
}

input CoordinationWhereInput {
  AND: [CoordinationWhereInput!]
  OR: [CoordinationWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  logoUrl: String
  logoUrl_not: String
  logoUrl_contains: String
  logoUrl_not_contains: String
  logoUrl_starts_with: String
  logoUrl_not_starts_with: String
  logoUrl_ends_with: String
  logoUrl_not_ends_with: String
  logoUrl_i: String
  logoUrl_not_i: String
  logoUrl_contains_i: String
  logoUrl_not_contains_i: String
  logoUrl_starts_with_i: String
  logoUrl_not_starts_with_i: String
  logoUrl_ends_with_i: String
  logoUrl_not_ends_with_i: String
  logoUrl_in: [String]
  logoUrl_not_in: [String]

  """
   condition must be true for all nodes
  """
  members_every: CoordinationUserPositionWhereInput

  """
   condition must be true for at least 1 node
  """
  members_some: CoordinationUserPositionWhereInput

  """
   condition must be false for all nodes
  """
  members_none: CoordinationUserPositionWhereInput
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  organizationName: String
  organizationName_not: String
  organizationName_contains: String
  organizationName_not_contains: String
  organizationName_starts_with: String
  organizationName_not_starts_with: String
  organizationName_ends_with: String
  organizationName_not_ends_with: String
  organizationName_i: String
  organizationName_not_i: String
  organizationName_contains_i: String
  organizationName_not_contains_i: String
  organizationName_starts_with_i: String
  organizationName_not_starts_with_i: String
  organizationName_ends_with_i: String
  organizationName_not_ends_with_i: String
  organizationName_in: [String]
  organizationName_not_in: [String]

  """
   condition must be true for all nodes
  """
  socialNetworks_every: CoordinationSocialNetworkWhereInput

  """
   condition must be true for at least 1 node
  """
  socialNetworks_some: CoordinationSocialNetworkWhereInput

  """
   condition must be false for all nodes
  """
  socialNetworks_none: CoordinationSocialNetworkWhereInput
}

input CoordinationWhereUniqueInput {
  id: ID!
}

enum SortCoordinationsBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  logoUrl_ASC
  logoUrl_DESC
  name_ASC
  name_DESC
  organizationName_ASC
  organizationName_DESC
}

input CoordinationOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  description: OrderDirection
  logoUrl: OrderDirection
  name: OrderDirection
  organizationName: OrderDirection
}

input CoordinationUpdateInput {
  createdAt: String
  description: String
  logoUrl: String
  members: CoordinationUserPositionRelateToManyInput
  name: String
  organizationName: String
  socialNetworks: CoordinationSocialNetworkRelateToManyInput
}

input CoordinationsUpdateInput {
  id: ID!
  data: CoordinationUpdateInput
}

input CoordinationCreateInput {
  createdAt: String
  description: String
  logoUrl: String
  members: CoordinationUserPositionRelateToManyInput
  name: String
  organizationName: String
  socialNetworks: CoordinationSocialNetworkRelateToManyInput
}

input CoordinationsCreateInput {
  data: CoordinationCreateInput
}

"""
 A keystone list
"""
type CoordinationSocialNetwork {
  id: ID!
  link: String
  socialNetwork: SocialNetwork
}

input CoordinationSocialNetworkWhereInput {
  AND: [CoordinationSocialNetworkWhereInput!]
  OR: [CoordinationSocialNetworkWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  link: String
  link_not: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  link_i: String
  link_not_i: String
  link_contains_i: String
  link_not_contains_i: String
  link_starts_with_i: String
  link_not_starts_with_i: String
  link_ends_with_i: String
  link_not_ends_with_i: String
  link_in: [String]
  link_not_in: [String]
  socialNetwork: SocialNetworkWhereInput
  socialNetwork_is_null: Boolean
}

input CoordinationSocialNetworkWhereUniqueInput {
  id: ID!
}

enum SortCoordinationSocialNetworksBy {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
}

input CoordinationSocialNetworkOrderByInput {
  id: OrderDirection
  link: OrderDirection
}

input CoordinationSocialNetworkUpdateInput {
  link: String
  socialNetwork: SocialNetworkRelateToOneInput
}

input CoordinationSocialNetworksUpdateInput {
  id: ID!
  data: CoordinationSocialNetworkUpdateInput
}

input CoordinationSocialNetworkCreateInput {
  link: String
  socialNetwork: SocialNetworkRelateToOneInput
}

input CoordinationSocialNetworksCreateInput {
  data: CoordinationSocialNetworkCreateInput
}

input CoordinationRelateToOneInput {
  create: CoordinationCreateInput
  connect: CoordinationWhereUniqueInput
  disconnect: CoordinationWhereUniqueInput
  disconnectAll: Boolean
}

input PositionRelateToOneInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
  disconnect: PositionWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type CoordinationUserPosition {
  id: ID!
  createdAt: String
  endDate: String
  startDate: String
  coordination: Coordination
  position: Position
  user: User
}

input CoordinationUserPositionWhereInput {
  AND: [CoordinationUserPositionWhereInput!]
  OR: [CoordinationUserPositionWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  endDate: String
  endDate_not: String
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_in: [String]
  endDate_not_in: [String]
  startDate: String
  startDate_not: String
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_in: [String]
  startDate_not_in: [String]
  coordination: CoordinationWhereInput
  coordination_is_null: Boolean
  position: PositionWhereInput
  position_is_null: Boolean
  user: UserWhereInput
  user_is_null: Boolean
}

input CoordinationUserPositionWhereUniqueInput {
  id: ID!
}

enum SortCoordinationUserPositionsBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  endDate_ASC
  endDate_DESC
  startDate_ASC
  startDate_DESC
}

input CoordinationUserPositionOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  endDate: OrderDirection
  startDate: OrderDirection
}

input CoordinationUserPositionUpdateInput {
  createdAt: String
  endDate: String
  startDate: String
  coordination: CoordinationRelateToOneInput
  position: PositionRelateToOneInput
  user: UserRelateToOneInput
}

input CoordinationUserPositionsUpdateInput {
  id: ID!
  data: CoordinationUserPositionUpdateInput
}

input CoordinationUserPositionCreateInput {
  createdAt: String
  endDate: String
  startDate: String
  coordination: CoordinationRelateToOneInput
  position: PositionRelateToOneInput
  user: UserRelateToOneInput
}

input CoordinationUserPositionsCreateInput {
  data: CoordinationUserPositionCreateInput
}

"""
 A keystone list
"""
type Position {
  id: ID!
  createdAt: String
  description: String
  name: String
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
}

input PositionWhereUniqueInput {
  id: ID!
}

enum SortPositionsBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
}

input PositionOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  description: OrderDirection
  name: OrderDirection
}

input PositionUpdateInput {
  createdAt: String
  description: String
  name: String
}

input PositionsUpdateInput {
  id: ID!
  data: PositionUpdateInput
}

input PositionCreateInput {
  createdAt: String
  description: String
  name: String
}

input PositionsCreateInput {
  data: PositionCreateInput
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TagRelateToManyInput {
  create: [TagCreateInput]
  connect: [TagWhereUniqueInput]
  disconnect: [TagWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_DocumentField
  publishDate: String
  author: User
  tags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]!
  _tagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishDate: String
  publishDate_not: String
  publishDate_lt: String
  publishDate_lte: String
  publishDate_gt: String
  publishDate_gte: String
  publishDate_in: [String]
  publishDate_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean

  """
   condition must be true for all nodes
  """
  tags_every: TagWhereInput

  """
   condition must be true for at least 1 node
  """
  tags_some: TagWhereInput

  """
   condition must be false for all nodes
  """
  tags_none: TagWhereInput
}

input PostWhereUniqueInput {
  id: ID!
}

enum SortPostsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  publishDate_ASC
  publishDate_DESC
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
  tags: TagRelateToManyInput
}

input PostsUpdateInput {
  id: ID!
  data: PostUpdateInput
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
  tags: TagRelateToManyInput
}

input PostsCreateInput {
  data: PostCreateInput
}

input PostRelateToManyInput {
  create: [PostCreateInput]
  connect: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput
}

input TagWhereUniqueInput {
  id: ID!
}

enum SortTagsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyInput
}

input TagsUpdateInput {
  id: ID!
  data: TagUpdateInput
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyInput
}

input TagsCreateInput {
  data: TagCreateInput
}

input AllianceRelateToManyInput {
  create: [AllianceCreateInput]
  connect: [AllianceWhereUniqueInput]
  disconnect: [AllianceWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  alliances(
    where: AllianceWhereInput! = {}
    search: String
    sortBy: [SortAlliancesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Alliance!]!
  _alliancesMeta(
    where: AllianceWhereInput! = {}
    search: String
    sortBy: [SortAlliancesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use alliancesCount instead."
    )
  alliancesCount(where: AllianceWhereInput! = {}): Int
  email: String
  isAdmin: Boolean
  name: String
  password_is_set: Boolean
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]

  """
   condition must be true for all nodes
  """
  alliances_every: AllianceWhereInput

  """
   condition must be true for at least 1 node
  """
  alliances_some: AllianceWhereInput

  """
   condition must be false for all nodes
  """
  alliances_none: AllianceWhereInput
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  isAdmin: Boolean
  isAdmin_not: Boolean
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  isAdmin_ASC
  isAdmin_DESC
  name_ASC
  name_DESC
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  name: OrderDirection
}

input UserUpdateInput {
  alliances: AllianceRelateToManyInput
  email: String
  isAdmin: Boolean
  name: String
  password: String
  posts: PostRelateToManyInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  alliances: AllianceRelateToManyInput
  email: String
  isAdmin: Boolean
  name: String
  password: String
  posts: PostRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single Alliance item.
  """
  createAlliance(data: AllianceCreateInput): Alliance

  """
   Create multiple Alliance items.
  """
  createAlliances(data: [AlliancesCreateInput]): [Alliance]

  """
   Update a single Alliance item by ID.
  """
  updateAlliance(id: ID!, data: AllianceUpdateInput): Alliance

  """
   Update multiple Alliance items by ID.
  """
  updateAlliances(data: [AlliancesUpdateInput]): [Alliance]

  """
   Delete a single Alliance item by ID.
  """
  deleteAlliance(id: ID!): Alliance

  """
   Delete multiple Alliance items by ID.
  """
  deleteAlliances(ids: [ID!]): [Alliance]

  """
   Create a single AllianceSocialNetwork item.
  """
  createAllianceSocialNetwork(
    data: AllianceSocialNetworkCreateInput
  ): AllianceSocialNetwork

  """
   Create multiple AllianceSocialNetwork items.
  """
  createAllianceSocialNetworks(
    data: [AllianceSocialNetworksCreateInput]
  ): [AllianceSocialNetwork]

  """
   Update a single AllianceSocialNetwork item by ID.
  """
  updateAllianceSocialNetwork(
    id: ID!
    data: AllianceSocialNetworkUpdateInput
  ): AllianceSocialNetwork

  """
   Update multiple AllianceSocialNetwork items by ID.
  """
  updateAllianceSocialNetworks(
    data: [AllianceSocialNetworksUpdateInput]
  ): [AllianceSocialNetwork]

  """
   Delete a single AllianceSocialNetwork item by ID.
  """
  deleteAllianceSocialNetwork(id: ID!): AllianceSocialNetwork

  """
   Delete multiple AllianceSocialNetwork items by ID.
  """
  deleteAllianceSocialNetworks(ids: [ID!]): [AllianceSocialNetwork]

  """
   Create a single SocialNetwork item.
  """
  createSocialNetwork(data: SocialNetworkCreateInput): SocialNetwork

  """
   Create multiple SocialNetwork items.
  """
  createSocialNetworks(data: [SocialNetworksCreateInput]): [SocialNetwork]

  """
   Update a single SocialNetwork item by ID.
  """
  updateSocialNetwork(id: ID!, data: SocialNetworkUpdateInput): SocialNetwork

  """
   Update multiple SocialNetwork items by ID.
  """
  updateSocialNetworks(data: [SocialNetworksUpdateInput]): [SocialNetwork]

  """
   Delete a single SocialNetwork item by ID.
  """
  deleteSocialNetwork(id: ID!): SocialNetwork

  """
   Delete multiple SocialNetwork items by ID.
  """
  deleteSocialNetworks(ids: [ID!]): [SocialNetwork]

  """
   Create a single Coordination item.
  """
  createCoordination(data: CoordinationCreateInput): Coordination

  """
   Create multiple Coordination items.
  """
  createCoordinations(data: [CoordinationsCreateInput]): [Coordination]

  """
   Update a single Coordination item by ID.
  """
  updateCoordination(id: ID!, data: CoordinationUpdateInput): Coordination

  """
   Update multiple Coordination items by ID.
  """
  updateCoordinations(data: [CoordinationsUpdateInput]): [Coordination]

  """
   Delete a single Coordination item by ID.
  """
  deleteCoordination(id: ID!): Coordination

  """
   Delete multiple Coordination items by ID.
  """
  deleteCoordinations(ids: [ID!]): [Coordination]

  """
   Create a single CoordinationSocialNetwork item.
  """
  createCoordinationSocialNetwork(
    data: CoordinationSocialNetworkCreateInput
  ): CoordinationSocialNetwork

  """
   Create multiple CoordinationSocialNetwork items.
  """
  createCoordinationSocialNetworks(
    data: [CoordinationSocialNetworksCreateInput]
  ): [CoordinationSocialNetwork]

  """
   Update a single CoordinationSocialNetwork item by ID.
  """
  updateCoordinationSocialNetwork(
    id: ID!
    data: CoordinationSocialNetworkUpdateInput
  ): CoordinationSocialNetwork

  """
   Update multiple CoordinationSocialNetwork items by ID.
  """
  updateCoordinationSocialNetworks(
    data: [CoordinationSocialNetworksUpdateInput]
  ): [CoordinationSocialNetwork]

  """
   Delete a single CoordinationSocialNetwork item by ID.
  """
  deleteCoordinationSocialNetwork(id: ID!): CoordinationSocialNetwork

  """
   Delete multiple CoordinationSocialNetwork items by ID.
  """
  deleteCoordinationSocialNetworks(ids: [ID!]): [CoordinationSocialNetwork]

  """
   Create a single CoordinationUserPosition item.
  """
  createCoordinationUserPosition(
    data: CoordinationUserPositionCreateInput
  ): CoordinationUserPosition

  """
   Create multiple CoordinationUserPosition items.
  """
  createCoordinationUserPositions(
    data: [CoordinationUserPositionsCreateInput]
  ): [CoordinationUserPosition]

  """
   Update a single CoordinationUserPosition item by ID.
  """
  updateCoordinationUserPosition(
    id: ID!
    data: CoordinationUserPositionUpdateInput
  ): CoordinationUserPosition

  """
   Update multiple CoordinationUserPosition items by ID.
  """
  updateCoordinationUserPositions(
    data: [CoordinationUserPositionsUpdateInput]
  ): [CoordinationUserPosition]

  """
   Delete a single CoordinationUserPosition item by ID.
  """
  deleteCoordinationUserPosition(id: ID!): CoordinationUserPosition

  """
   Delete multiple CoordinationUserPosition items by ID.
  """
  deleteCoordinationUserPositions(ids: [ID!]): [CoordinationUserPosition]

  """
   Create a single Position item.
  """
  createPosition(data: PositionCreateInput): Position

  """
   Create multiple Position items.
  """
  createPositions(data: [PositionsCreateInput]): [Position]

  """
   Update a single Position item by ID.
  """
  updatePosition(id: ID!, data: PositionUpdateInput): Position

  """
   Update multiple Position items by ID.
  """
  updatePositions(data: [PositionsUpdateInput]): [Position]

  """
   Delete a single Position item by ID.
  """
  deletePosition(id: ID!): Position

  """
   Delete multiple Position items by ID.
  """
  deletePositions(ids: [ID!]): [Position]

  """
   Create a single Post item.
  """
  createPost(data: PostCreateInput): Post

  """
   Create multiple Post items.
  """
  createPosts(data: [PostsCreateInput]): [Post]

  """
   Update a single Post item by ID.
  """
  updatePost(id: ID!, data: PostUpdateInput): Post

  """
   Update multiple Post items by ID.
  """
  updatePosts(data: [PostsUpdateInput]): [Post]

  """
   Delete a single Post item by ID.
  """
  deletePost(id: ID!): Post

  """
   Delete multiple Post items by ID.
  """
  deletePosts(ids: [ID!]): [Post]

  """
   Create a single Tag item.
  """
  createTag(data: TagCreateInput): Tag

  """
   Create multiple Tag items.
  """
  createTags(data: [TagsCreateInput]): [Tag]

  """
   Update a single Tag item by ID.
  """
  updateTag(id: ID!, data: TagUpdateInput): Tag

  """
   Update multiple Tag items by ID.
  """
  updateTags(data: [TagsUpdateInput]): [Tag]

  """
   Delete a single Tag item by ID.
  """
  deleteTag(id: ID!): Tag

  """
   Delete multiple Tag items by ID.
  """
  deleteTags(ids: [ID!]): [Tag]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  email: String
  isAdmin: Boolean
  name: String
  password: String
}

type Query {
  """
   Search for all Alliance items which match the where clause.
  """
  allAlliances(
    where: AllianceWhereInput! = {}
    search: String
    sortBy: [SortAlliancesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Alliance!]

  """
   Search for the Alliance item with the matching ID.
  """
  Alliance(where: AllianceWhereUniqueInput!): Alliance

  """
   Perform a meta-query on all Alliance items which match the where clause.
  """
  _allAlliancesMeta(
    where: AllianceWhereInput! = {}
    search: String
    sortBy: [SortAlliancesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use alliancesCount instead."
    )
  alliancesCount(where: AllianceWhereInput! = {}): Int

  """
   Search for all AllianceSocialNetwork items which match the where clause.
  """
  allAllianceSocialNetworks(
    where: AllianceSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortAllianceSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [AllianceSocialNetwork!]

  """
   Search for the AllianceSocialNetwork item with the matching ID.
  """
  AllianceSocialNetwork(
    where: AllianceSocialNetworkWhereUniqueInput!
  ): AllianceSocialNetwork

  """
   Perform a meta-query on all AllianceSocialNetwork items which match the where clause.
  """
  _allAllianceSocialNetworksMeta(
    where: AllianceSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortAllianceSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AllianceSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use allianceSocialNetworksCount instead."
    )
  allianceSocialNetworksCount(where: AllianceSocialNetworkWhereInput! = {}): Int

  """
   Search for all SocialNetwork items which match the where clause.
  """
  allSocialNetworks(
    where: SocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [SocialNetwork!]

  """
   Search for the SocialNetwork item with the matching ID.
  """
  SocialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork

  """
   Perform a meta-query on all SocialNetwork items which match the where clause.
  """
  _allSocialNetworksMeta(
    where: SocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use socialNetworksCount instead."
    )
  socialNetworksCount(where: SocialNetworkWhereInput! = {}): Int

  """
   Search for all Coordination items which match the where clause.
  """
  allCoordinations(
    where: CoordinationWhereInput! = {}
    search: String
    sortBy: [SortCoordinationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Coordination!]

  """
   Search for the Coordination item with the matching ID.
  """
  Coordination(where: CoordinationWhereUniqueInput!): Coordination

  """
   Perform a meta-query on all Coordination items which match the where clause.
  """
  _allCoordinationsMeta(
    where: CoordinationWhereInput! = {}
    search: String
    sortBy: [SortCoordinationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use coordinationsCount instead."
    )
  coordinationsCount(where: CoordinationWhereInput! = {}): Int

  """
   Search for all CoordinationSocialNetwork items which match the where clause.
  """
  allCoordinationSocialNetworks(
    where: CoordinationSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortCoordinationSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CoordinationSocialNetwork!]

  """
   Search for the CoordinationSocialNetwork item with the matching ID.
  """
  CoordinationSocialNetwork(
    where: CoordinationSocialNetworkWhereUniqueInput!
  ): CoordinationSocialNetwork

  """
   Perform a meta-query on all CoordinationSocialNetwork items which match the where clause.
  """
  _allCoordinationSocialNetworksMeta(
    where: CoordinationSocialNetworkWhereInput! = {}
    search: String
    sortBy: [SortCoordinationSocialNetworksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationSocialNetworkOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use coordinationSocialNetworksCount instead."
    )
  coordinationSocialNetworksCount(
    where: CoordinationSocialNetworkWhereInput! = {}
  ): Int

  """
   Search for all CoordinationUserPosition items which match the where clause.
  """
  allCoordinationUserPositions(
    where: CoordinationUserPositionWhereInput! = {}
    search: String
    sortBy: [SortCoordinationUserPositionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationUserPositionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CoordinationUserPosition!]

  """
   Search for the CoordinationUserPosition item with the matching ID.
  """
  CoordinationUserPosition(
    where: CoordinationUserPositionWhereUniqueInput!
  ): CoordinationUserPosition

  """
   Perform a meta-query on all CoordinationUserPosition items which match the where clause.
  """
  _allCoordinationUserPositionsMeta(
    where: CoordinationUserPositionWhereInput! = {}
    search: String
    sortBy: [SortCoordinationUserPositionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CoordinationUserPositionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use coordinationUserPositionsCount instead."
    )
  coordinationUserPositionsCount(
    where: CoordinationUserPositionWhereInput! = {}
  ): Int

  """
   Search for all Position items which match the where clause.
  """
  allPositions(
    where: PositionWhereInput! = {}
    search: String
    sortBy: [SortPositionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PositionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Position!]

  """
   Search for the Position item with the matching ID.
  """
  Position(where: PositionWhereUniqueInput!): Position

  """
   Perform a meta-query on all Position items which match the where clause.
  """
  _allPositionsMeta(
    where: PositionWhereInput! = {}
    search: String
    sortBy: [SortPositionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PositionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use positionsCount instead."
    )
  positionsCount(where: PositionWhereInput! = {}): Int

  """
   Search for all Post items which match the where clause.
  """
  allPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]

  """
   Search for the Post item with the matching ID.
  """
  Post(where: PostWhereUniqueInput!): Post

  """
   Perform a meta-query on all Post items which match the where clause.
  """
  _allPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int

  """
   Search for all Tag items which match the where clause.
  """
  allTags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]

  """
   Search for the Tag item with the matching ID.
  """
  Tag(where: TagWhereUniqueInput!): Tag

  """
   Perform a meta-query on all Tag items which match the where clause.
  """
  _allTagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
